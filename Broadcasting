/**********************************************Tx*******************************************************/
#include "contiki.h"
#include "net/rime.h"
#include <stdio.h> 
/**********************************************/
PROCESS(rf_test_process, "RF test TX process");
AUTOSTART_PROCESSES(&rf_test_process);

static struct etimer et;
static struct broadcast_conn bc;

/****************************************/
PROCESS_THREAD(rf_test_process, ev, data)
{

  PROCESS_BEGIN();

  broadcast_open(&bc, 128, 0);   //opening broadcast with 128 number of channels.

  while(1) {
    etimer_set(&et, CLOCK_SECOND * 2);    //2 seconds delay.
    PROCESS_WAIT_EVENT_UNTIL(etimer_expired(&et));    //event wait until the timer expires.
    etimer_reset(&et);

    packetbuf_copyfrom("Message! \n", 14);   
    broadcast_send(&bc);      //broadcast send.
  }

  PROCESS_END();
}
/************************************************End*******************************************************/


/************************************************Rx********************************************************/
#include "contiki.h"
#include "net/rime.h"
#include <stdio.h> 
/**********************************************/
PROCESS(rf_test_process, "RF test RX process");
AUTOSTART_PROCESSES(&rf_test_process);

static struct etimer et;
static struct broadcast_conn bc;
static const struct broadcast_callbacks broadcast_callbacks = {recv_bc};

/****************************************/
PROCESS_THREAD(rf_test_process, ev, data)
{

  PROCESS_BEGIN();

  broadcast_open(&bc, 128, &broadcast_callbacks);     //callback initialized for the receiver

  while(1) {
    etimer_set(&et, CLOCK_SECOND);           
    PROCESS_WAIT_EVENT_UNTIL(etimer_expired(&et));
    etimer_reset(&et);
  }

  PROCESS_END();
}
/**************************************************************/

static void recv_bc(struct broadcast_conn *c, rimeaddr_t *from)
{
  printf("Received packet = %s\n", (char *)packetbuf_dataptr()); 
}
/****************************************************End******************************************************/
